imports:
# Compute related resources
- path: igm-service.jinja
- path: vm-service.jinja
- path: instance-template.jinja
# Network related resources
- path: firewall.jinja
- path: network-service.jinja
- path: vpn-gateway.jinja
- path: vpn-tunnel.jinja
# Storage related resources
- path: bucket.jinja
- path: sql-service.jinja

resources:
#Create VM instance groups with auto-scaling
- name: igm-deployment
  type: igm-service.jinja
  properties:
    minSize: 1
    maxSize: 2
    machineType: e2-medium
    regions:
    - region: europe-west4
      curr:
        name: ubuntu-lts-1
        image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts
        subnet: $(ref.custom-subnet-1.selfLink)
        diskSizeGb: 200
        startup: |
          #! /bin/bash
          sudo apt-get update
          sudo apt-get install -y apache2
          sudo service apache2 start
    - region: europe-north1
      curr:
        name: ubuntu-lts-2
        image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts
        subnet: $(ref.custom-subnet-2.selfLink)
        diskSizeGb: 200
        startup: |
          #! /bin/bash
          sudo apt-get update
          sudo apt-get install -y apache2
          sudo service apache2 start

# Create a custom network with Subnets
- name: custom-network
  type: network-service.jinja
  properties:
    regions:
      - region: europe-west4
        curr:
          name: custom-subnet-1
          ipCidrRange: 10.10.0.0/24
          network: $(ref.custom-network.selfLink)
      - region: europe-north1
        curr:
          name: custom-subnet-2
          ipCidrRange: 10.20.0.0/24
          network: $(ref.custom-network.selfLink)

# Allow HTTP, SSH and RDP traffic on the network
- name: http-ssh-rdp
  type: firewall.jinja
  properties:
    network: $(ref.custom-network.selfLink)
    IPProtocol: TCP
    port: ["80", "22", "3389"]

# Create a VPN tunnel
- name: vpn
  type: vpn-tunnel.jinja
  properties:
    region: europe-west4
    network: $(ref.custom-network.selfLink)
    peerIPv4: 1.2.3.4
    secretPass: Tvki5icmMW
    priority: 1000
    destRange: 192.168.0.0

# Create a Gateway
- name: vpn-gateway
  type: vpn-gateway.jinja
  properties:
    region: europe-west4
    network: $(ref.custom-network.selfLink)

# Create and manage database
- name: database-instance
  type: sql-service.jinja
  properties:
    tier: db-n1-standard-1
    region: europe-west2
    readReplicas: 1
    failOver: true
    replicationType: SYNCHRONOUS